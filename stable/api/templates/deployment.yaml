{{- include "common-manifests" . }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api.fullname" . }}
  labels:
{{ include "api.labels" . | indent 4 }}
spec:
  {{- if kindIs "int64" .Values.replicaCount }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "api.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "api.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- include "common-annotations" . | nindent 8 }}
        {{- with .Values.annotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
    {{- include "common-spec" . | nindent 6 }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "api.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: waitfordb
          image: "{{ .Values.waitfordb.image.repository }}:{{ .Values.waitfordb.image.tag }}"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "{{ .Values.db.host | default (include "postgresqlHost" .) }}"
          - name: PGPORT
            value: "{{ .Values.db.port }}"
      containers:
        {{- include "common-containers" . | nindent 8 }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: PORT
            value: "{{ .Values.containerPort }}"
          - name: COOKIE_DOMAIN
            value: "{{ .Values.conf.cookieDomain | default (include "domain" .) }}"
          - name: PG_HOST
            value: "{{ .Values.db.host | default (include "postgresqlHost" .) }}"
          - name: PG_NAME
            value: "{{ .Values.db.name }}"
          - name: PG_USER
            value: "{{ .Values.db.user }}"
          - name: PG_PORT
            value: "{{ .Values.db.port }}"
          - name: PG_SSLMODE
            value: "{{ .Values.db.sslMode }}"
          {{- if .Values.db.ca }}
          - name: PG_CA_B64
            value: "{{ .Values.db.ca | b64enc }}"
          {{- end }}
          - name: LOG_LEVEL
            value: "{{ .Values.conf.log.level }}"
          - name: SAML_MEATADATA
            value: "{{ .Values.conf.saml.metadata }}"
          - name: SAML_ISSUER
            value: "{{ .Values.conf.saml.issuer }}"
          - name: SAML_CALLBACK
            value: "{{ .Values.conf.saml.callback }}"
          - name: SAML_TRUSTED_DOMAINS
            value: {{ printf "'%s'" .Values.conf.saml.trustedDomains }}
          - name: DEFAULT_OWNERS
            value: {{ printf "'%s'" .Values.conf.defaultOwners }}
          - name: SCANENGINE_URL
            value: "{{ .Values.conf.scanengineUrl | default ( printf "%s/v1/" (include "scanengineUrl" .) ) }}"
          - name: SCHEDULER_URL
            value: "{{ .Values.conf.schedulerUrl | default (include "crontinuousUrl" .) }}"
          - name: SQS_QUEUE_ARN
            value: "{{ .Values.conf.queueArn }}"
          - name: REPORTS_SNS_ARN
            value: "{{ .Values.conf.reports.snsArn }}"
          - name: REPORTS_API_URL
            value: "{{ .Values.conf.reports.apiUrl | default (include "reportsgeneratorUrl" .) }}"
          - name: SCAN_REDIRECT_URL
            value: "{{ .Values.conf.reports.redirectUrl }}"
          - name: VULCAN_UI_URL
            value: "{{ .Values.conf.reports.vulcanUIUrl }}"
          - name: PERSISTENCE_HOST
            value: "{{ .Values.conf.persistenceHost | default  (include "persistenceHost" .) }}"
          - name: VULNERABILITYDB_URL
            value: "{{ .Values.conf.vulndbapiUrl | default  (include "vulndbapiUrl" .) }}"
          - name: AWSCATALOGUE_KIND
            value: "{{ .Values.conf.awscatalogue.kind }}"
          - name: AWSCATALOGUE_URL
            value: "{{ .Values.conf.awscatalogue.url }}"
          - name: AWSCATALOGUE_RETRIES
            value: "{{ .Values.conf.awscatalogue.retries }}"
          - name: AWSCATALOGUE_RETRY_INTERVAL
            value: "{{ .Values.conf.awscatalogue.retry_interval}}"
        {{- include "common-envs" . | nindent 10 -}}
        {{- range $name, $value := .Values.extraEnv }}
          - name: {{ $name }}
            value: {{ $value | quote }}
        {{- end }}
          envFrom:
          - secretRef:
              name: {{ include "api.fullname" . }}
          ports:
            - name: {{ include "common-appPortName" . }}
              containerPort: {{ .Values.containerPort }}
              protocol: TCP
          {{- include "common-lifecycle" . | nindent 10 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- include "common-volumes" . | nindent 6}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
