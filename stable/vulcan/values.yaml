# Default values for vulcan.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  domain: vulcan.local
  region: local
    # -- custom labels for all components
  podLabels: {}
    # foo: bar

# -- Anchors
anchors:

  # -- postgres database settings
  db: &db
    host:
    name:
    user:
    password: TBD
    port: 5432
    sslMode: disable
    ca:

  dogstatsd: &dogstatsd
    image:
      repository: datadog/dogstatsd
      tag: 7.42.2
    enabled: true

  # Default values for all the components
  comp: &comp

    replicaCount:
    image:
      pullPolicy: Always

    # -- defines the required services for the component
    meta:
      sqs: false
      sns: false
      s3: false

    # -- custom extra labels
    extraPodLabels: {}
    # foo: bar

    # -- custom env variables
    extraEnv: {}
    #   FOO: BAR

    # -- proxy settings
    proxy: &proxy
      enabled: true
      image:
        repository: haproxy
        tag: 2.4.23-alpine
      port: 9090
      metricsPort: 9101
      cache:
        enabled: false
        maxSize: 64   # mb
        maxAge: 240   # seconds
      probe: false
      probePath: /healthz
      probeInitialDelay: 5
      probeTimeoutSeconds: 3
      timeoutConnect:
      timeoutClient:
      timeoutServer:
      timeoutTunnel:
      lifecycle:
        preStopSleep: 30
      resources: {}

    podSecurityContext: {}

    securityContext: {}

    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    containerPort: 8080

    lifecycle:
      preStopSleep: 30

    # -- liveness settings
    livenessProbe: &comp-livenessProbe
      enabled: true
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 10

    # -- readiness settings
    readinessProbe: &comp-readynessProbe
      enabled: true
      # -- defaults to healthcheckPath
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 5

    # -- autoscaling settings
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage:
      behavior: {}

    # -- service settings
    service:
      type: ClusterIP
      port: 80
      portName:
      protocol: TCP
      targetPort:

    ingress: &ingress
      ## @param ingress.enabled Enable ingress controller resource
      ##
      enabled: false
      ## @param ingress.pathType Default path type for the ingress resource
      ##
      pathType: ImplementationSpecific
      ## @param ingress.hostname Default host for the ingress resource
      ##
      hostname:
      ## @param ingress.path Default path for the ingress resource
      ##
      path: /
      ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
      ## For a full list of possible ingress annotations, please see
      ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
      ## Use this parameter to set the required annotations for cert-manager, see
      ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
      ##
      ## e.g:
      ## annotations:
      ##   kubernetes.io/ingress.class: nginx
      ##   cert-manager.io/cluster-issuer: cluster-issuer-name
      ##
      annotations: {}
      ## @param ingress.tls Enable TLS for `ingress.hostname` parameter
      ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
      ## You can use the ingress.secrets parameter to create this TLS secret, rely on cert-manager to create it, or
      ## let the chart create self-signed certificates for you
      ##
      tls: false
      ## @param ingress.secretName Use an existing secret for tls.
      ##
      secretName:
      ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
      ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
      ## Example:
      ## extraHosts:
      ## - name: magento.local
      ##   path: /
      ##
      extraHosts: []
      ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
      ## e.g:
      ## extraPaths:
      ## - path: /*
      ##   backend:
      ##     serviceName: ssl-redirect
      ##     servicePort: use-annotation
      ##
      extraPaths: []
      ## @param ingress.extraRules The list of additional rules to be added to this ingress record. Evaluated as a template
      ## Useful when looking for additional customization, such as using different backend
      ##
      extraRules: []
      ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
      ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
      ## Example:
      ## extraTls:
      ## - hosts:
      ##     - magento.local
      ##   secretName: magento.local-tls
      ##
      extraTls: []
      ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
      ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
      ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
      ##
      ingressClassName: ""

    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}


waitfordb:
  image:
    repository: busybox
    tag: 1.35.0


postgresql:
  enabled: false
  service:
    port: 5432
  auth:
    username: postgres
    postgresPassword: secret
    password: secret
    database: persistence
  primary:
    initdb:
      scripts:
        initial-dbs.sql: |
          CREATE DATABASE api;
          CREATE DATABASE scanengine;
          CREATE DATABASE reportsgenerator;
          CREATE DATABASE vulnerabilitydb;
    resources:
      requests:
        cpu: "0"
        memory: "0"
    persistence:
      enabled: false
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
  metrics:
    enabled: false

redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: false
  master:
    service:
      ports:
        redis: 6379
    persistence:
      enabled: false
  serviceAccount:
    create: false

goaws:
  enabled: false
  name: goaws
  <<: *comp

  image:
    repository: admiralpiett/goaws
    tag: v0.4.1
    pullPolicy: Always

  containerPort: 8080

  visibilityTimeout: 14400
  receiveMessageWaitTimeSeconds: 0

  config:
    goaws.yaml: |
      Local:
        Host: {{ include "goaws.fullname" . }}
        Port: {{ .Values.goaws.containerPort }}
        AccountId: "012345678900"
        LogToFile: false
        QueueAttributeDefaults:
          VisibilityTimeout: {{ .Values.goaws.visibilityTimeout }}
          ReceiveMessageWaitTimeSeconds: {{ .Values.goaws.receiveMessageWaitTimeSeconds }}
        Queues:
          - Name: VulcanK8SAPIScans
          - Name: VulcanK8SMetricsChecks
          - Name: VulcanK8SMetricsFindings
          - Name: VulcanK8SMetricsScans
          - Name: VulcanK8SReportsGenerator
          - Name: VulcanK8SScanEngineCheckStatus
          - Name: VulcanK8SV2ChecksGeneric
          {{- range $value := .Values.scanengine.conf.queues.other }}
          - Name: {{ regexFind "[^:]+$" $value.arn }}
          {{- end }}
          - Name: VulcanK8SVulnDBChecks
        Topics:
          - Name: VulcanK8SChecks
            Subscriptions:
              - QueueName: VulcanK8SMetricsChecks
                Raw: false
              - QueueName: VulcanK8SVulnDBChecks
                Raw: false
          - Name: VulcanK8SScans
            Subscriptions:
              - QueueName: VulcanK8SAPIScans
                Raw: false
              - QueueName: VulcanK8SMetricsScans
                Raw: false
          - Name: VulcanK8SReportsGen
            Subscriptions:
              - QueueName: VulcanK8SReportsGenerator
                Raw: false
          - Name: VulcanK8SVulnDBVulns
            Subscriptions:
              - QueueName: VulcanK8SMetricsFindings
                Raw: false
        RandomLatency:
          Min: 0
          Max: 0

minio:
  enabled: false
  nameOverride: minio
  mode: standalone
  defaultBuckets: "reports,logs,scans,insights,public-insights,crontinuous"
  serviceAccount:
    create: false
  persistence:
    enabled: false
  service:
    ports:
      api: 80
  auth:
    rootUser: admin
    rootPassword: adminsecret
  extraEnv:
    - name: MINIO_REGION_NAME
      value: local


results:
  enabled: true
  name: results
  <<: *comp

  image:
    repository: adevinta/vulcan-results
    tag: "1.0"
    pullPolicy: Always

  conf:
    debug: "false"
    region:
    bucketReports: reports
    bucketLogs: logs
    linkBase:   # https://results.global.local

  healthcheckPath: /healthcheck

  dogstatsd: *dogstatsd

  meta:
    s3: true


persistence:
  enabled: true
  name: persistence
  <<: *comp

  image:
    repository: adevinta/vulcan-persistence
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /status

  meta:
    s3: true
    sns: true
    sqs: true

  # -- postgres database settings
  db:
    <<: *db
    name: persistence

  conf:
    logLevel: warn
    secretKeyBase: TBDTBD
    railsMaxThreads: 4

  dogstatsd: *dogstatsd


stream:
  enabled: true
  name: stream
  <<: *comp

  image:
    repository: adevinta/vulcan-stream
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /status

  conf:
    logLevel: "DEBUG"
    ttl: 0  # default

  redis:
    host:
    port:
    username:
    password:
    db: 0   # default

  dogstatsd: *dogstatsd


api:
  enabled: true
  name: api
  <<: *comp

  image:
    repository: adevinta/vulcan-api
    tag: "1.0"
    pullPolicy: Always

  meta:
    sqs: true
    sns: true
    s3: true

  healthcheckPath: /api/v1/healthcheck

  # -- postgres database settings
  db:
    <<: *db
    name: api

  conf:
    debug: "false"
    bucketReports: reports
    bucketLogs: logs
    s3PrivateBucket: insights
    s3PublicBucket: public-insights
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SAPIScans
    queueName: VulcanK8SAPIScans
    reports:
      snsArn: arn:aws:sns:local:012345678900:VulcanK8SReportsGen
      redirectUrl:
      vulcanUIUrl:
    secretKey: TBDTBD
    cookieDomain:     # default .Values.global.domain
    saml:
      metadata: https://okta/app/TBD/sso/saml/metadata
      issuer: http://okta/TBD
      callback:   # https://vulcan-api/api/v1/login/callback
      trustedDomains:   # '["www.vulcan.local"]'
    logLevel: INFO
    defaultOwners: '[]'  # '["owner1","owner2"]'
    vulndbapiUrl:   # http://vulnerabilitydbapi
    persistenceHost:
    crontinuousUrl:
    reportsgeneratorUrl:
    scanengineUrl:
    apiHostname:
    awscatalogue:
      kind: None
      url: http://catalogue.example.com
      key: key
      retries: 1
      retry_interval: 2
    # -- array of name/allowedAssettypes/blockedAssettypes/allowedChecks/blockedChecks/excludingSuffixes which allows to customise global program policies
    globalPolicies:
      # - name: web-scanning-global
      #   allowedChecks:
      #     - vulcan-zap
      #     - vulcan-burp
      #   excludingSuffixes:
      #     - experimental
      # - name: default-global
      #   blockedChecks:
      #     - vulcan-masscan
      #     - vulcan-zap
    kafka:
      broker:
      username:
      password:
      topics:     # '{assets = "assets"}'

  dogstatsd: *dogstatsd

  ingress:
    <<: *ingress
    subdomain: www
    path: /api


crontinuous:
  enabled: true
  name: crontinuous
  <<: *comp

  image:
    repository: adevinta/vulcan-crontinuous
    tag: "1.0"
    pullPolicy: Always

  meta:
    s3: true

  healthcheckPath: /healthcheck

  conf:
    region:
    vulcanToken: TBDTBDTBD
    crontinuousBucket: crontinuous
    vulcanUser: tbd
    vulcanApi:    # http://host/api
    enableTeamsWhitelistScan: "false"
    teamsWhitelistScan: '[]'
    enableTeamsWhitelistReport: "false"
    teamsWhitelistReport: '[]'


scanengine:
  enabled: true
  name: scanengine
  <<: *comp

  image:
    repository: adevinta/vulcan-scan-engine
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /v1/healthcheck

  meta:
    sqs: true
    sns: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SScanEngineCheckStatus
    queueName: VulcanK8SScanEngineCheckStatus
    scansSNS:
      topicArn: arn:aws:sns:local:012345678900:VulcanK8SScans
    checksSNS:
      topicArn: arn:aws:sns:local:012345678900:VulcanK8SChecks
    queues:
      default:
        arn: arn:aws:sqs:local:012345678900:VulcanK8SV2ChecksGeneric
      # -- array of arn/checktypes
      other:
      # - arn: arn:aws:sqs:local:012345678900:VulcanK8SV2QueueZap
      #   checktypes: '["vulcan-zap"]'
      # - arn: arn:aws:sqs:local:012345678900:VulcanK8SV2QueueBurp
      #   checktypes: '["vulcan-burp"]'
    persistenceHost:
    streamUrl:
    checkCreator:
      numOfWorkers: 2
      period: 20

  # -- postgres database settings
  db:
    <<: *db
    name: scanengine

  dogstatsd: *dogstatsd


ui:
  enabled: true
  name: ui
  <<: *comp

  image:
    repository: adevinta/vulcan-ui
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /index.html

  meta:
    sqs: false

  conf:
    apiUrl:   # https://www.vulcan.local/api/v1/
    docs:
      apiLink: https://docs.example.com/vulcan/vulcan-api/   # vulcan API doc
      whitelistingLink:   # vulcan scanner IPs
      discoveryLink: https://docs.example.com/vulcan/discovery  # vulcan asset discovery doc
      auditRoleLink: https://docs.example.com/vulcan/network-access  # vulcan AWS audit role doc
    contact:
      email: vulcan@example.com   # vulcan contact email
      slack: https://example.slack.com/archives/XXXXX    # vulcan slack channel
    dashboard:
      # -- if not set redirects to UI's dashboard.html
      link:   # vulcan metrics dashboard

  ingress:
    <<: *ingress
    subdomain: www
    path: /


insights:
  enabled: true
  name: insights
  <<: *comp

  image:
    repository: pottava/s3-proxy
    tag: "2.0"
    pullPolicy: Always

  healthcheckPath: /healthcheck

  # -- proxy settings. mandatory for insights
  proxy:
    <<: *proxy
    enabled: true
    cache:
      enabled: true

  conf:
    region:
    log: "false"
    private:
      name: private
      s3Bucket: insights
      prefix: ""
    public:
      name: public
      s3Bucket: public-insights
      prefix: "/public"

  meta:
    s3: true

reportsgenerator:
  enabled: true
  name: reportsgenerator
  <<: *comp

  image:
    repository: adevinta/vulcan-reports-generator
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /healthcheck

  meta:
    sqs: true
    s3: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SReportsGenerator
    queueName: VulcanK8SReportsGenerator
    sqsNumProcessors:
    scanengineUrl:
    resultsUrl:
    generators:
      scan:
        emailSubject: "Security Overview"
        publicBucket: public-insights
        privateBucket: insights
        gaId: UA-000000000-0
        proxyEndpoint:     # https://insights.vulcan.local
        contact:
          companyName: Example
          email: vulcan@example.com
          jira: https://jira.example.com/
          slackChannel: https://example.slack.com/archives/XXXXX
          supportEmail: vulcan@example.com
        docs:
          apiDocLink: https://docs.example.com/vulcan/vulcan-api/examples/#how-do-i-list-the-members-of-a-team
          roadmapLink: https://docs.example.com/vulcan/roadmap
        vulcanUi:     # https://vulcan-www
        viewReport:   # vulcan-api/api/v1/report?team_id=%s&scan_id=%s
        redirectUrl:  # https://public-redirect/index.html?reportUrl=
      livereport:
        emailSubject:   # Vulcan Digest
    ses:
      region:
      from: tbd@tbd.com
      cc: '["tbd@tbd.com"]'

  # -- postgres database settings
  db:
    <<: *db
    name: reportsgenerator

  dogstatsd: *dogstatsd


metrics:
  enabled: true
  name: metrics
  <<: *comp

  image:
    repository: containers.mpi-internal.com/spt-security/vulcan-metrics
    tag: "1.0"
    pullPolicy: Always

  proxy:
    enabled: false

  conf:
    region:
    logLevel: warn
    sqsPollingInterval: 10
    checksQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsChecks
    scansQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsScans
    findingsQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsFindings
    resultsScheme: http
    devHoseURL: http://devhose/devhose
    devHoseToken: token
    devHoseTenant: tbd
    devHoseMetricsSource: tbd
    devHoseFindingsSource: tbd
    vulcanApi:    # http://host/api
    vulcanAPIToken: token
    vulcanAPIExternal:    # https://external/api

  # : redis sidecar
  redis:
    image: bitnami/redis:6.2.12

  meta:
    sqs: true

  dogstatsd: *dogstatsd


vulndbapi:
  enabled: true
  name: vulndbapi
  <<: *comp

  image:
    repository: adevinta/vulnerability-db-api
    tag: "1.0"
    pullPolicy: Always

  healthcheckPath: /healthcheck

  conf:
    logLevel: info
    readReplicaHost:

  # -- postgres database settings
  db:
    <<: *db
    name: vulnerabilitydb


vulndb:
  enabled: true
  name: vulndb
  <<: *comp

  image:
    repository: adevinta/vulnerability-db
    tag: "1.0"
    pullPolicy: Always

  conf:
    logLevel: "error"
    checksQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SVulnDBChecks
    vulnsTopicArn: arn:aws:sns:local:012345678900:VulcanK8SVulnDBVulns
    sqsNumProcessors:
    vulnsTopicEnabled: true
    maxEventAge: 365
    resultsUrl:           # https://results.vulcan.example.com
    resultsInternalUrl:   # http://vulcan-results
    kafka:
      enabled: false
      username:
      password:
      broker:
      topic:

  proxy:
    enabled: false

  meta:
    sqs: true
    sns: true

  # -- postgres database settings
  db:
    <<: *db
    name: vulnerabilitydb

  ingress:
    enabled: false


sqsexporter:
  enabled: true
  name: sqsexporter
  <<: *comp
  image:
    repository: jesusfcr/sqs-prometheus-exporter
    tag: 0.4.0
    pullPolicy: Always

  proxy:
    enabled: false

  queueNamePrefix: VulcanK8S
  meta:
    sqs: true


dogstatsd:
  name: dogstatsd
  apiKey: TBD


# -- Allows to inject custom manifests that would be processed as templates
extraManifests: {}
  # config1: |
  #   apiVersion: v1
  #   kind: ConfigMap
  #   ...
  # config2: |
  #   apiVersion: v1
  #   ...
