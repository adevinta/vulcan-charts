# Default values for vulcan.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  domain: vulcan.local
  region: local

# -- Anchors
anchors:

  db: &db
    user: postgres
    password: TBD
    sslMode: disable

  dogstatsd: &dogstatsd
    image: 
      repository: datadog/dogstatsd
      tag: 7.27.0
    enabled: true

  # Default values for all the components
  comp: &comp

    replicaCount:
    image:
      pullPolicy: Always

    # -- custom env variables
    extraEnv: {}
    #   FOO: BAR

    # -- proxy settings
    proxy: &proxy
      enabled: true
      image:
        repository: haproxy
        tag: 2.3-alpine
      port: 9090
      metricsPort: 9101
      cache:
        enabled: false
        maxSize: 64 # mb
        maxAge: 240 # seconds
      probe: false
      probePath: /healthz
      probeInitialDelay: 5
      probeTimeoutSeconds: 3
      timeoutConnect:
      timeoutClient:
      timeoutServer:
      timeoutTunnel:
      lifecycle:
        preStopSleep: 30
      resources: {}

    podSecurityContext: {}

    securityContext: {}

    imagePullSecrets: []
    nameOverride: ""
    fullnameOverride: ""
    containerPort: 8080

    lifecycle:
      preStopSleep: 30

    # -- liveness settings
    livenessProbe: &comp-livenessProbe
      enabled: true
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 10

    # -- readiness settings
    readinessProbe: &comp-readynessProbe
      enabled: true
      path:
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 5

    # -- autoscaling settings
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage:

    # -- service settings
    service:
      type: ClusterIP
      port: 80
      portName:
      protocol: TCP
      targetPort:

    # -- ingress settings
    ingress:
      enabled: false
      annotations: {}
      hosts: []
      tls: []

    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}


waitfordb:
  image:
    repository: postgres
    tag: 9.6-alpine


postgresql:
  enabled: false
  postgresqlUsername: postgres
  postgresqlPassword: TBD
  postgresqlDatabase: persistence
  initdbScripts:
    initial-dbs.sql: |
      CREATE DATABASE api;
      CREATE DATABASE scanengine;
      CREATE DATABASE reportsgenerator;
      CREATE DATABASE vulnerabilitydb;
  master:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
  resources:
    requests:
      cpu: "0"
      memory: "0"
  persistence:
    enabled: false
  metrics:
    enabled: true


goaws:
  enabled: false
  name: goaws
  <<: *comp

  image:
    repository: pafortin/goaws
    tag: v0.3.1
    pullPolicy: Always

  containerPort: 8080
  config:
    goaws.yaml: |
      Local:
        Host: {{ .Release.Name }}-goaws
        Port: {{ .Values.containerPort }}
        AccountId: "012345678900"
        LogToFile: false
        QueueAttributeDefaults:
          VisibilityTimeout: 30
          ReceiveMessageWaitTimeSeconds: 0
        Queues:
          - Name: VulcanK8SAPIScans
          - Name: VulcanK8SChecksGeneric
          - Name: VulcanK8SChecksTenable
          - Name: VulcanK8SMetricsChecks
          - Name: VulcanK8SMetricsScans
          - Name: VulcanK8SMetricsFindings
          - Name: VulcanK8SScanEngineChecks
          - Name: VulcanK8SReportsGenerator
          - Name: VulcanK8SPersistenceChecks
          - Name: VulcanK8SVulnDBChecks
        Topics:
          - Name: VulcanK8SChecks
            Subscriptions:
              - QueueName: VulcanK8SMetricsChecks
                Raw: true
              - QueueName: VulcanK8SScanEngineChecks
                Raw: true
                #FilterPolicy: '{"foo": ["bar"]}'
          - Name: VulcanK8SScans
            Subscriptions:
              - QueueName: VulcanK8SAPIScans
                Raw: true
              - QueueName: VulcanK8SMetricsScans
                Raw: true
          - Name: VulcanK8SReportsGen
            Subscriptions:
              - QueueName: VulcanK8SReportsGenerator
                Raw: true
          - Name: VulcanK8SScanEngineChecks
            Subscriptions:
              - QueueName: VulcanK8SPersistenceChecks
                Raw: true
          - Name: VulcanK8SVulnDBVulns
              - QueueName: VulcanK8SMetricsFindings
                Raw: true
        RandomLatency:
          Min: 0
          Max: 0

minio:
  enabled: false
  nameOverride: vulcans3
  mode: standalone
  defaultBuckets: "reports,logs,scans,insights,public-insights,crontinuous"
  serviceAccount:
    create: false
  persistence:
    enabled: false
  service:
    port: 80
    type: NodePort    # To bypass problem with minio.chart
  accessKey:
    password: AKIAIOSFODNN7EXAMPLE
  secretKey:
    password: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  extraEnv:
    - name: MINIO_REGION_NAME
      value: local


results:
  enabled: true
  name: results
  <<: *comp

  image:
    repository: adevinta/vulcan-results
    tag: latest
    pullPolicy: Always

  conf:
    debug: "false"
    region:
    bucketReports: reports
    bucketLogs: logs
    linkBase: http://chart-example.local


  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /healthcheck

  dogstatsd: *dogstatsd

  infra:
    s3: true


persistence:
  enabled: true
  name: persistence
  <<: *comp

  image:
    repository: adevinta/vulcan-persistence
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /status

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /status

  infra:
    s3: true
    sns: true
    sqs: true

  db:
    <<: *db
    name: persistence

  conf:
    logLevel: warn
    secretKeyBase: TBDTBD
    railsMaxThreads: 4

  dogstatsd: *dogstatsd


stream:
  enabled: true
  name: stream
  <<: *comp

  image:
    repository: adevinta/vulcan-stream
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /status

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /status

  conf:
    logLevel: "DEBUG"
    redis:
      host: TBD
      port: TDB
      usr: TBD
      pwd: TBD
      db: 0   # default
      ttl: 0  # default

  dogstatsd: *dogstatsd


api:
  enabled: true
  name: api
  <<: *comp

  image:
    repository: adevinta/vulcan-api
    tag: latest
    pullPolicy: Always

  infra:
    sqs: true
    sns: true
    s3: true

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /api/v1/healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /api/v1/healthcheck

  db:
    <<: *db
    name: api

  conf:
    debug: "false"
    bucketReports: reports
    bucketLogs: logs
    s3PrivateBucket: insights
    s3PublicBucket: public-insights
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SAPIScans
    queueName: VulcanK8SAPIScans
    reports:
      snsArn: arn:aws:sns:local:012345678900:VulcanK8SReportsGen
      redirectUrl:
      vulcanUIUrl:
    secretKey: TBDTBD
    cookieDomain:     # default .Values.global.domain
    saml:
      metadata: https://okta/app/TBD/sso/saml/metadata
      issuer: http://okta/TBD
      callback: # https://vulcan-api/api/v1/login/callback
      trustedDomains: '[]'  # '["vulcan-api"]'
    log:
      level: INFO
    defaultOwners: '[]'  # '["owner1","owner2"]'
    vulndbapiUrl: # http://vulnerabilitydbapi
    persistenceHost:
    crontinuousUrl:
    reportsgeneratorUrl:
    scanengineUrl:
    apiHostname:
    awscatalogue:
      kind: None
      url: http://catalogue.example.com
      key: key
      retries: 1
      retry_interval: 2

  dogstatsd: *dogstatsd

  ingress:
    path: /api


crontinuous:
  enabled: true
  name: crontinuous
  <<: *comp

  image:
    repository: adevinta/vulcan-crontinuous
    tag: latest
    pullPolicy: Always

  infra:
    s3: true

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /healthcheck

  conf:
    region:
    vulcanToken: TBDTBDTBD
    crontinuousBucket: crontinuous
    vulcanUser: tbd
    vulcanApi:  # http://host/api
    enableTeamsWhitelistScan: "false"
    teamsWhitelistScan: '[]'
    enableTeamsWhitelistReport: "false"
    teamsWhitelistReport: '[]'


scanengine:
  enabled: true
  name: scanengine
  <<: *comp

  image:
    repository: adevinta/vulcan-scan-engine
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /v1/healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /v1/healthcheck

  infra:
    sqs: true
    sns: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SScanEngineChecks
    queueName: VulcanK8SScanEngineChecks
    scansSNS:
      topicArn: arn:aws:sns:local:012345678900:VulcanK8SScans
    checksSNS:
      topicArn: arn:aws:sns:eu-west-1:012345678900:VulcanK8SScanEngineChecks
    queues:
      default:
        arn: VulcanK8SChecksGeneric
      nessus:
        arn: VulcanK8SChecksTenable
        checktypes: '["vulcan-nessus"]'
    persistenceHost:
    streamUrl:
    checkCreator:
      numOfWorkers: 2
      period: 20

  db:
    <<: *db
    name: scanengine

  dogstatsd: *dogstatsd


ui:
  enabled: true
  name: ui
  <<: *comp

  image:
    repository: adevinta/vulcan-ui
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /index.html

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /index.html

  infra:
    sqs: false

  conf:
    apiUrl: # https://vulcan-api/api/v1/
    docs:
      apiLink: # vulcan API doc
      whitelistingLink: # vulcan scanner IPs
      discoveryLink: # vulcan asset discovery doc
      auditRoleLink: # vulcan AWS audit role doc
    contact:
      email: # vulcan contact email
      slack: # vulcan slack channel


insights:
  enabled: true
  name: insights
  <<: *comp

  image:
    repository: pottava/s3-proxy
    tag: "2.0"
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /healthcheck

  # -- proxy settings. mandatory for insights
  proxy:
    <<: *proxy
    enabled: true
    cache:
      enabled: true

  conf:
    region:
    log: "false"
    private:
      name: private
      s3Bucket: insights
      prefix: ""
      port: 8080
    public:
      name: public
      s3Bucket: public-insights
      prefix: "/public"
      port: 8081


reportsgenerator:
  enabled: true
  name: reportsgenerator
  <<: *comp

  image:
    repository: adevinta/vulcan-reports-generator
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /healthcheck

  infra:
    sqs: true

  conf:
    logLevel: "error"
    queueArn: arn:aws:sqs:local:012345678900:VulcanK8SReportsGenerator
    queueName: VulcanK8SReportsGenerator
    scanengineUrl:
    resultsUrl:
    generators:
      scan:
        emailSubject: "Security Overview"
        publicBucket: public-insights
        privateBucket: insights
        gaId: UA-000000000-0
        proxyEndpoint: # https://vulcan-insights
        contact:
          companyName:
          supportEmail:
          email:
          slackChannel:
          jira: # vulcan Jira project
        docs:
          apiDocLink: # vulcan-api doc link
          roadmapLink: # vulcan roadmap link
        vulcanUi: # https://vulcan-www
        viewReport: # vulcan-api/api/v1/report?team_id=%s&scan_id=%s
        redirectUrl: # https://public-redirect/index.html?reportUrl=
      livereport:
        emailSubject: #Vulcan Digest
    ses:
      region:
      from: tbd@tbd.com
      cc: '["tbd@tbd.com"]'

  db:
    <<: *db
    name: reportsgenerator

  dogstatsd: *dogstatsd


redis:
  enabled: true
  name: redis
  <<: *comp

  image:
    repository: bitnami/redis
    tag: "6.0.12"
    pullPolicy: Always

  containerPort: 6379

  conf:
    redisPassword: TBD 

  service:
    type: ClusterIP
    port: 6379
    protocol: TCP
    targetPort: 6379
    portName: redis


metrics:
  enabled: true
  name: metrics
  <<: *comp

  image:
    repository: containers.mpi-internal.com/spt-security/vulcan-metrics
    tag: latest
    pullPolicy: Always

  proxy:
    enabled: false

  conf:
    region:
    logLevel: warn
    sqsPollingInterval: 10
    checksQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsChecks
    scansQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsScans
    findingsQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SMetricsFindings
    resultsScheme: http
    devHoseURL: http://devhose/devhose
    devHoseToken: token
    devHoseTenant: tbd
    devHoseMetricsSource: tbd
    devHoseFindingsSource: tbd
    redisAddr:
    redisPassword:
    resultsHost:
    vulcanApi: # http://host/api
    vulcanAPIToken: token
    vulcanAPIExternal: # https://external/api

  infra:
    sqs: true

  dogstatsd: *dogstatsd


vulndbapi:
  enabled: true
  name: vulndbapi
  <<: *comp

  image:
    repository: adevinta/vulnerability-db-api
    tag: latest
    pullPolicy: Always

  # -- liveness settings
  livenessProbe:
    <<: *comp-livenessProbe
    path: /healthcheck

  # -- readiness settings
  readinessProbe:
    <<: *comp-readynessProbe
    path: /healthcheck

  conf:
    logLevel: info

  db:
    <<: *db
    name: vulnerabilitydb


vulndb:
  enabled: true
  name: vulndb
  <<: *comp

  image:
    repository: adevinta/vulnerability-db
    tag: latest
    pullPolicy: Always

  conf:
    logLevel: "error"
    checksQueueArn: arn:aws:sqs:local:012345678900:VulcanK8SVulnDBChecks
    vulnsTopicArn: arn:aws:sns:local:012345678900:VulcanK8SVulnDBVulns
    maxEventAge: 365
    resultsUrl: http://vulcan-results.vulcan.com
    resultsInternalUrl: # http://vulcan-results

  proxy:
    enabled: false

  infra:
    sqs: true
    sns: true

  db:
    <<: *db
    name: vulnerabilitydb


sqsExporter:
  enabled: true
  image:
    repository: jesusfcr/sqs-exporter
    tag: custom-endpoint
  queueNamePrefix: VulcanK8S
  resources: {}


dogstatsd:
  apiKey: TBD
