---
# Source: vulcan/charts/api/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-api
  name: vulcan-api
type: Opaque
data:
  PG_PASSWORD: "cGFzc3dvcmRkYmFwaQ=="
  SECRET_KEY: "YXBpc2VjcmV0a2V5"
  AWSCATALOGUE_KEY: "YXdzY2F0YWxvZ2VrZXk="
---
# Source: vulcan/charts/crontinuous/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-crontinuous
  name: vulcan-crontinuous
type: Opaque
data:
  VULCAN_TOKEN: "c3VwZXJzZWNyZXR2dWxjYW50b2tlbg=="
---
# Source: vulcan/charts/metrics/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-metrics
  name: vulcan-metrics
type: Opaque
data:
  DEVHOSE_TOKEN: "c2VjcmV0ZGV2aG9zZXRva2Vu"
  REDIS_PASSWORD: "cmVkaXNwYXNzd29yZA=="
  VULCAN_API_TOKEN: "c3VwZXJzZWNyZXR2dWxjYW50b2tlbg=="
---
# Source: vulcan/charts/persistence/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-persistence
  name: vulcan-persistence
type: Opaque
data:
  POSTGRES_PASSWORD: "cGFzc3dvcmRwZXJzaXN0ZW5jZQ=="
  SECRET_KEY_BASE: "c2VjcmV0a2V5"
---
# Source: vulcan/charts/reportsgenerator/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-reportsgenerator
  name: vulcan-reportsgenerator
type: Opaque
data:
  PG_PASSWORD: "cGFzc3dvcmRyZXBvcnRnZW5lcmF0b3I="
---
# Source: vulcan/charts/scanengine/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-scanengine
  name: vulcan-scanengine
type: Opaque
data:
  PG_PASSWORD: "cGFzc3dvcmRzY2FuZW5naW5l"
---
# Source: vulcan/charts/stream/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-stream
  name: vulcan-stream
type: Opaque
data:
  REDIS_PWD: ""
---
# Source: vulcan/charts/vulndb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-vulndb
  name: vulcan-vulndb
type: Opaque
data:
  PG_PASSWORD: "eHh4eHh4eHh4eA=="
---
# Source: vulcan/charts/vulndbapi/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    name: vulcan-vulndbapi
  name: vulcan-vulndbapi
type: Opaque
data:
  PG_PASSWORD: "eHh4eHh4eHh4eA=="
---
# Source: vulcan/templates/dogstatsd-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: vulcan-0.2.0
    app.kubernetes.io/name: vulcan
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: dogstatsd
  name: vulcan-dogstatsd
type: Opaque
data:
  DD_API_KEY: "eHh4eHh4eHh4eHh4eHh4eHh4eHh4"
---
# Source: vulcan/charts/api/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-api-proxy
  name: vulcan-api-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 50s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/crontinuous/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-crontinuous-proxy
  name: vulcan-crontinuous-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/insights/templates/config-proxy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-insights-proxy
  name: vulcan-insights-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100
      default_backend private
      use_backend public if { path -i -m beg /public }

    backend private
      server app 127.0.0.1:8080

    backend public
      server app 127.0.0.1:8081

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/persistence/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-persistence-proxy
  name: vulcan-persistence-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/reportsgenerator/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-reportsgenerator-proxy
  name: vulcan-reportsgenerator-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/results/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-results-proxy
  name: vulcan-results-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/scanengine/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-scanengine-proxy
  name: vulcan-scanengine-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/stream/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-stream-proxy
  name: vulcan-stream-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/ui/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-ui-proxy
  name: vulcan-ui-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/charts/vulndbapi/templates/deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: vulcan-vulndbapi-proxy
  name: vulcan-vulndbapi-proxy
data:
  haproxy.cfg: |
    global
      daemon
      maxconn 64
      log stdout format raw daemon

    defaults
      mode http
      timeout connect 5s
      timeout client 25s
      timeout server 25s
      timeout tunnel 3600s
      option  http-server-close
    cache small
      total-max-size 64     # mb
      max-age 600           # seconds

    frontend http
      bind *:9090
      log global
      option httplog clf
      http-request cache-use small
      http-response cache-store small
      http-request capture req.hdr(Host) len 50
      http-request capture req.hdr(User-Agent) len 100

      default_backend app

    backend app
      server app 127.0.0.1:8080

    frontend stats
      bind *:9101
      option http-use-htx
      http-request use-service prometheus-exporter if { path /metrics }
      monitor-uri /healthz
---
# Source: vulcan/templates/custom-manifests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: vulcan-0.2.0
    app.kubernetes.io/name: vulcan
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  name: vulcan-custom-configmap
data:
  custom.cfg: |
    Example file
---
# Source: vulcan/charts/api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-api
  labels:
    app.kubernetes.io/name: api
    helm.sh/chart: api-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/crontinuous/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-crontinuous
  labels:
    helm.sh/chart: crontinuous-0.2.0
    app.kubernetes.io/name: crontinuous
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: crontinuous
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/insights/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-insights
  labels:
    helm.sh/chart: insights-0.2.0
    app.kubernetes.io/name: insights
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: insights
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/metrics/templates/redis.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-metrics-redis
  labels:
    app: vulcan-metrics-redis
spec:
  ports:
    - port: 6379
  selector:
    app.kubernetes.io/name: metrics-redis
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/persistence/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-persistence
  labels:
    app.kubernetes.io/name: persistence
    helm.sh/chart: persistence-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: persistence
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/reportsgenerator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-reportsgenerator
  labels:
    helm.sh/chart: reportsgenerator-0.2.0
    app.kubernetes.io/name: reportsgenerator
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: reportsgenerator
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/results/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-results
  labels:
    app.kubernetes.io/name: results
    helm.sh/chart: results-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: results
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/scanengine/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-scanengine
  labels:
    helm.sh/chart: scanengine-0.2.0
    app.kubernetes.io/name: scanengine
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: scanengine
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/stream/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-stream
  labels:
    app.kubernetes.io/name: stream
    helm.sh/chart: stream-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: stream
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-ui
  labels:
    helm.sh/chart: ui-0.2.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/vulndbapi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: vulcan-vulndbapi
  labels:
    helm.sh/chart: vulndbapi-0.2.0
    app.kubernetes.io/name: vulndbapi
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: vulndbapi
    app.kubernetes.io/instance: vulcan
---
# Source: vulcan/charts/api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-api
  labels:
    app.kubernetes.io/name: api
    helm.sh/chart: api-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 9ace865fea8b03f6eec6502bc37fe5d489fde4aa34933f3916a1116cc5588b4e
        checksum/config-proxy: 58e79fbf2fe2272545a72e024421516af46fdaf8e78f4130a295ab1d2c0b17c3
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/APIRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "api.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: api
          securityContext:
            {}
          image: "adevinta/vulcan-api:tag-api"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: COOKIE_DOMAIN
            value: "vulcan.com"
          - name: PG_HOST
            value: "api.postgres.host"
          - name: PG_NAME
            value: "vulcanapi"
          - name: PG_USER
            value: "vulcan"
          - name: PG_PORT
            value: "5432"
          - name: PG_SSLMODE
            value: "verify-full"
          - name: PG_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          - name: LOG_LEVEL
            value: "INFO"
          - name: SAML_MEATADATA
            value: "https://org.issuer.com/app/appcode/sso/saml/metadata"
          - name: SAML_ISSUER
            value: "http://www.issuer.com/appcode"
          - name: SAML_CALLBACK
            value: "https://www.vulcan.com/api/v1/login/callback"
          - name: SAML_TRUSTED_DOMAINS
            value: "[\"www.vulcan.com\"]"
          - name: DEFAULT_OWNERS
            value: "[\"aaaaaaaa-xxxx-yyyy-zzzz-bbbbbbbbbbbb\"]"
          - name: SCANENGINE_URL
            value: "http://vulcan-scanengine/v1/"
          - name: SCHEDULER_URL
            value: "http://vulcan-crontinuous/"
          - name: SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:APIScans"
          - name: REPORTS_SNS_ARN
            value: "arn:aws:sns:eu-west-1:000000000000:ReportsGen"
          - name: REPORTS_API_URL
            value: "http://vulcan-reportsgenerator/"
          - name: SCAN_REDIRECT_URL
            value: ""
          - name: VULCAN_UI_URL
            value: "https://www.vulcan.com"
          - name: PERSISTENCE_HOST
            value: "vulcan-persistence"
          - name: VULNERABILITYDB_URL
            value: "http://vulcan-vulndbapi/"
          - name: AWSCATALOGUE_KIND
            value: "CloudGovernance"
          - name: AWSCATALOGUE_URL
            value: "https://catalogue-api.host"
          - name: AWSCATALOGUE_RETRIES
            value: "4"
          - name: AWSCATALOGUE_RETRY_INTERVAL
            value: "2"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-api
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /api/v1/healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /api/v1/healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-api-proxy
---
# Source: vulcan/charts/crontinuous/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-crontinuous
  labels:
    helm.sh/chart: crontinuous-0.2.0
    app.kubernetes.io/name: crontinuous
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: crontinuous
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: crontinuous
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: fe56c35aee7c2fda773bbf7da2008539d09a56dd99a47913bc242ee67305327b
        checksum/config-proxy: 1b93de26eb9c49037ec37a14b4753603f588b76c4f455e96dbae716db13ace43
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/CrontinuousRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: crontinuous
          securityContext:
            {}
          image: "adevinta/vulcan-crontinuous:tag-crontinuous"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: AWS_REGION
            value: eu-west-1
          - name: CRONTINUOUS_BUCKET
            value: s3-vulcan-crontinuous
          - name: VULCAN_API
            value: http://vulcan-api/api
          - name: VULCAN_USER
            value: vulcanuser
          - name: ENABLE_TEAMS_WHITELIST_SCAN
            value: "false"
          - name: TEAMS_WHITELIST_SCAN
            value: "[]"
          - name: ENABLE_TEAMS_WHITELIST_REPORT
            value: "false"
          - name: TEAMS_WHITELIST_REPORT
            value: "[]"
          
          
          envFrom:
          - secretRef:
              name: vulcan-crontinuous
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-crontinuous-proxy
---
# Source: vulcan/charts/insights/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-insights
  labels:
    helm.sh/chart: insights-0.2.0
    app.kubernetes.io/name: insights
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: insights
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: insights
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/config: 4c398e23e1183470094482c0f3175d57dc79f71fca3ae18517c55163d8275756
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/InsightsRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: "app-private"
          securityContext:
            {}
          image: "pottava/s3-proxy:2.0"
          imagePullPolicy: Always
          env:
            - name: AWS_REGION
              value: "eu-west-1"
            - name: ACCESS_LOG
              value: "false"
            - name: AWS_S3_BUCKET
              value: "s3-vulcan-insights"
            - name: STRIP_PATH
              value: ""
            - name: HEALTHCHECK_PATH
              value: "/healthcheck"
            - name: APP_PORT
              value: "8080"
          ports:
            - name: private
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
        - name: "app-public"
          securityContext:
            {}
          image: "pottava/s3-proxy:2.0"
          imagePullPolicy: Always
          env:
            - name: AWS_REGION
              value: "eu-west-1"
            - name: ACCESS_LOG
              value: "false"
            - name: AWS_S3_BUCKET
              value: "s3-vulcan-public-insights"
            - name: STRIP_PATH
              value: "/public"
            - name: HEALTHCHECK_PATH
              value: "/healthcheck"
            - name: APP_PORT
              value: "8081"
          ports:
            - name: public
              containerPort: 8081
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-insights-proxy
---
# Source: vulcan/charts/metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-metrics
  labels:
    helm.sh/chart: metrics-0.2.0
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: a2e1548d2bb8bec7b2a4741ff6ec6328e93262f08b20d3e737de9236644d559a
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/MetricsRole
    spec:
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: metrics
          securityContext:
            {}
          image: "containers.mpi-internal.com/spt-security/vulcan-metrics:tag-metrics"
          imagePullPolicy: Always
          env:
          - name: LOG_LEVEL
            value: "warn"
          - name: SQS_POLLING_INTERVAL
            value: "10"
          - name: CHECKS_SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:MetricsChecks"
          - name: SCANS_SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:MetricsScans"
          - name: FINDINGS_SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:MetricsFindings"
          - name: RESULTS_HOST
            value: "vulcan-results"
          - name: RESULTS_SCHEME
            value: "http"
          - name: DEVHOSE_URL
            value: "http://devhosehost.com/devhose"
          - name: DEVHOSE_TENANT
            value: "purple"
          - name: DEVHOSE_METRICS_SOURCE
            value: "usage"
          - name: DEVHOSE_FINDINGS_SOURCE
            value: "vulcan-findings"
          - name: REDIS_ADDR
            value: "vulcan-metrics-redis:6379"
          - name: VULCAN_API
            value: http://vulcan-api/api
          - name: VULCAN_API_EXTERNAL
            value: "https://www.vulcan.com/api"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-metrics
          resources:
            {}
---
# Source: vulcan/charts/metrics/templates/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-metrics-redis
  labels:
    app: vulcan-metrics-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics-redis
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics-redis
        app.kubernetes.io/instance: vulcan
    spec:
      imagePullSecrets:
        - name: pullsecretname
      containers:
      - name: redis
        image: "redis:6.0-alpine"
        imagePullPolicy: Always
        args: ["--requirepass", "$(REDIS_PASSWORD)"]
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: vulcan-metrics
                key: REDIS_PASSWORD
        ports:
          - containerPort: 6379
            name: redis
---
# Source: vulcan/charts/persistence/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-persistence
  labels:
    app.kubernetes.io/name: persistence
    helm.sh/chart: persistence-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: persistence
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: persistence
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 888d48931c4fb52076d319a8dd385cf375a30a5bad51d5bab1a602dce380cfc6
        checksum/config-proxy: b802619608fbe027f3340ba6002e2134908eba5353043bb897dc44cbde142e76
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/PersistenceRole
    spec:
      terminationGracePeriodSeconds: 60
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "persistence.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: persistence
          securityContext:
            {}
          image: "adevinta/vulcan-persistence:tag-persistence"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: POSTGRES_DB
            value: "vulcanpersistence"
          - name: POSTGRES_HOST
            value: "persistence.postgres.host"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_USER
            value: "vulcan"
          - name: POSTGRES_SSLMODE
            value: "verify-full"
          - name: POSTGRES_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          - name: LOG_LEVEL
            value: "info"
          - name: STREAM_CHANNEL
            value: "events"
          - name: REGION
            value: "eu-west-1"
          - name: SCANS_BUCKET
            value: "s3-vulcan-scans"
          - name: SNS_TOPIC_ARN
            value: "arn:aws:sns:eu-west-1:000000000000:Checks"
          - name: AWS_REGION
            value: "eu-west-1"
          - name: NESSUS_CHECK_QUEUE
            value: "ChecksTenable"
          - name: RAILS_MAX_THREADS
            value: "16"
          - name: AWS_CREATE_CHECKS_SQS_URL
            value: "https://sqs.eu-west-1.amazonaws.com/000000000000/PersistenceChecks"
          - name: AWS_CREATE_CHECKS_WORKERS
            value: "10"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-persistence
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /status
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /status
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-persistence-proxy
---
# Source: vulcan/charts/reportsgenerator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-reportsgenerator
  labels:
    helm.sh/chart: reportsgenerator-0.2.0
    app.kubernetes.io/name: reportsgenerator
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: reportsgenerator
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reportsgenerator
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 5cf3181c2c7cd3cf88cb206966828ac704ef2171693e619bf6b3741e3e2b44f4
        checksum/config-proxy: 4f6d77766efadd79f08a3549095678b3e818e6a73c8e3ae7112822b8d2576a93
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ReportsGeneratorRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "reportsgenerator.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    limits:
                      cpu: 100m
                      memory: 128Mi
                    requests:
                      cpu: 100m
                      memory: 128Mi
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
        - name: reportsgenerator
          securityContext:
            {}
          image: "adevinta/vulcan-reports-generator:tag-reports"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: PG_HOST
            value: "reportsgenerator.postgres.host"
          - name: PG_NAME
            value: "reportsgenerator"
          - name: PG_USER
            value: "vulcan"
          - name: PG_PORT
            value: "5432"
          - name: PG_SSLMODE
            value: "verify-full"
          - name: PG_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          - name: LOG_LEVEL
            value: "error"
          - name: SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:ReportsGenerator"
          - name: SES_REGION
            value: "eu-west-1"
          - name: SES_FROM
            value: "vulcan@example.com"
          - name: SES_CC
            value: "['vulcan@example.com']"
          - name: SCAN_EMAIL_SUBJECT
            value: "Security Overview"
          - name: SCAN_S3_PUBLIC_BUCKET
            value: "s3-vulcan-public-insights"
          - name: SCAN_S3_PRIVATE_BUCKET
            value: "s3-vulcan-insights"
          - name: SCAN_GA_ID
            value: "UA-109338366-3"
          - name: SCAN_COMPANY_NAME
            value: "Example"
          - name: SCAN_SUPPORT_EMAIL
            value: "vulcan@example.com"
          - name: SCAN_CONTACT_EMAIL
            value: "vulcan@example.com"
          - name: SCAN_CONTACT_CHANNEL
            value: "https://www.slack.com/archives/XXXXX"
          - name: SCAN_CONTACT_JIRA
            value: "https://jira.com/"
          - name: SCAN_DOCS_API_LINK
            value: "https://www.domain.com/org/vulcan-api/examples/#how-do-i-list-the-members-of-a-team"
          - name: SCAN_DOCS_ROADMAP_LINK
            value: "https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxx/edit?usp=sharing"
          - name: PERSISTENCE_ENDPOINT  # We keep this PERSISTENCE variable for compatibility
            value: "http://vulcan-scanengine"
          - name: RESULTS_ENDPOINT
            value: "http://vulcan-results"
          - name: SCAN_PROXY_ENDPOINT
            value: "https://insights.vulcan.com"
          - name: VULCAN_UI
            value: "https://www.vulcan.com/"
          - name: SCAN_VIEW_REPORT
            value: "https://www.vulcan.com/api/v1/report?team_id=%s&scan_id=%s"
          - name: LIVEREPORT_EMAIL_SUBJECT
            value: "Vulcan Digest"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-reportsgenerator
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 250m
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 2Gi
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-reportsgenerator-proxy
---
# Source: vulcan/charts/results/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-results
  labels:
    app.kubernetes.io/name: results
    helm.sh/chart: results-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: results
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: results
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/config-proxy: 4ec34bf5d384cbf1063f93de10812b45f3372579b40b2200a140dbc802b7e8aa
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ResultsRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: results
          securityContext:
            {}
          image: "adevinta/vulcan-results:tag-results"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: DEBUG
            value: "false"
          - name: AWS_REGION
            value: "eu-west-1"
          - name: BUCKET_REPORTS
            value: "s3-vulcan-reports"
          - name: BUCKET_LOGS
            value: "s3-vulcan-logs"
          - name: LINK_BASE
            value: "https://results.vulcan.com/v1"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-results-proxy
---
# Source: vulcan/charts/scanengine/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-scanengine
  labels:
    helm.sh/chart: scanengine-0.2.0
    app.kubernetes.io/name: scanengine
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: scanengine
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scanengine
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: a803d871ecc2102ef86011b37240ed6dd73b8a7de7d75d3050fed5134ac7868f
        checksum/config-proxy: 59b54b62aaeafcc8b6d8039c395469a3dadb873a8c55e575c9d70c43ab52ec81
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ScanEngineRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "scanengine.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: scanengine
          securityContext:
            {}
          image: "adevinta/vulcan-scan-engine:tag-scanengine"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: PG_HOST
            value: "scanengine.postgres.host"
          - name: PG_NAME
            value: "vulcanscanengine"
          - name: PG_USER
            value: "vulcan"
          - name: PG_PORT
            value: "5432"
          - name: PG_SSLMODE
            value: "verify-full"
          - name: PG_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          - name: LOG_LEVEL
            value: "error"
          - name: PERSISTENCE_HOST
            value: "vulcan-persistence"
          - name: CHECKS_SQS_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:ScanEngineCheckStatus"
          - name: "SCANS_SNS_ARN"
            value: "arn:aws:sns:eu-west-1:000000000000:Scans"
          - name: "CHECKS_SNS_ARN"
            value: "arn:aws:sns:eu-west-1:000000000000:Checks"
          - name: "STREAM_URL"
            value: "http://vulcan-stream"
          - name: "CHECKS_CREATOR_WORKERS"
            value: "3"
          - name: "CHECKS_CREATOR_PERIOD"
            value: "30"
          - name: "QUEUES_DEFAULT_ARN"
            value: "arn:aws:sqs:eu-west-1:000000000000:V2ChecksGeneric"
          - name: "QUEUES_NESSUS_ARN"
            value: "arn:aws:sqs:eu-west-1:000000000000:V2ChecksTenable"
          - name: "QUEUES_NESSUS_CHECKTYPES"
            value: "[\"vulcan-nessus\"]"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-scanengine
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /v1/healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /v1/healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-scanengine-proxy
---
# Source: vulcan/charts/stream/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-stream
  labels:
    app.kubernetes.io/name: stream
    helm.sh/chart: stream-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: stream
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: stream
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 9d697362a0b21aac4de2e6bb432974062baabc4334e543cab156fcf596e670ce
        checksum/config-proxy: 4ce229b1aabddfc891090db67c10e1133bddbeb2067798137f53e9dc5718d1a6
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/StreamRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: dogstatsd
          image: "datadog/dogstatsd:7.25.1"
          envFrom:
          - secretRef:
              name: vulcan-dogstatsd
          ports:
            - containerPort: 8125
              name: dogstatsd
              protocol: UDP
          resources:
                    null
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: stream
          securityContext:
            {}
          image: "adevinta/vulcan-stream:tag-stream"
          imagePullPolicy: Always
          env:
          - name: PORT
            value: "8080"
          - name: LOG_LEVEL
            value: "DEBUG"
          - name: REDIS_HOST
            value: "redishost"
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_USR
            value: ""
          - name: REDIS_DB
            value: "0"
          - name: REDIS_TTL
            value: "0"
          
          - name: DOGSTATSD_ENABLED
            value: "true"
          - name: DOGSTATSD_HOST
            value: "localhost"
          - name: DOGSTATSD_PORT
            value: "8125"
          envFrom:
          - secretRef:
              name: vulcan-stream
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /status
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /status
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-stream-proxy
---
# Source: vulcan/charts/ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-ui
  labels:
    helm.sh/chart: ui-0.2.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/config-proxy: b44a4f2dd698250ef83325fdedb72d00297077d140a7e6477dfe60244f5bbd0b
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: ui
          securityContext:
            {}
          image: "adevinta/vulcan-ui:tag-vulcan-ui"
          imagePullPolicy: Always
          env:
          - name: API_URL
            value: "https://www.vulcan.com/api/v1/"
          - name: PORT
            value: "8080"
          - name: UI_DOCS_API_LINK
            value: "https://docs.erxample.com/security/vulcan-api/"
          - name: UI_DOCS_WHITELISTING_LINK
            value: "https://docs.example.com/security/vulcan-docs/network-access/"
          - name: UI_DOCS_DISCOVERY_LINK
            value: "https://docs.example.com/security/vulcan-docs/60-asset-auto-discovery/"
          - name: UI_DOCS_AUDITROLE_LINK
            value: "https://confluence.example.com/x/code"
          - name: UI_CONTACT_EMAIL
            value: "vulcan@example.com"
          - name: UI_CONTACT_SLACK
            value: "https://org.slack.com/archives/XXXXXXXXXXXX"
          
          
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-ui-proxy
---
# Source: vulcan/charts/vulndb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-vulndb
  labels:
    helm.sh/chart: vulndb-0.2.0
    app.kubernetes.io/name: vulndb
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vulndb
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vulndb
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 8ce3a83a987635a1fc31e643bf68f6965e089155cdabdb826357479804406c32
        
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/VulnDBRole
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "vulnerabilitydb.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: vulndb
          securityContext:
            {}
          image: "adevinta/vulnerability-db:tag-vulndb"
          imagePullPolicy: Always
          env:
          - name: MAX_EVENT_AGE
            value: "365"
          - name: LOG_LEVEL
            value: "info"
          - name: SQS_QUEUE_ARN
            value: "arn:aws:sqs:eu-west-1:000000000000:VulnDBChecks"
          - name: SNS_TOPIC_ARN
            value: "arn:aws:sns:eu-west-1:000000000000:VulnDBVulns"
          - name: RESULTS_URL
            value: https://results.vulcan.com
          - name: RESULTS_INTERNAL_URL
            value: "http://vulcan-results"
          - name: PG_HOST
            value: "vulnerabilitydb.postgres.host"
          - name: PG_NAME
            value: "vulnerabilitydb"
          - name: PG_USER
            value: "vulnerabilitydb"
          - name: PG_PORT
            value: "5432"
          - name: PG_SSLMODE
            value: "verify-full"
          - name: PG_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          
          
          envFrom:
          - secretRef:
              name: vulcan-vulndb
          resources:
            {}
---
# Source: vulcan/charts/vulndbapi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-vulndbapi
  labels:
    helm.sh/chart: vulndbapi-0.2.0
    app.kubernetes.io/name: vulndbapi
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vulndbapi
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vulndbapi
        app.kubernetes.io/instance: vulcan
      annotations:
        checksum/secrets: 7eff920daf75dc69b6a8b8919c0780cffbb579a2962762cb4fb7c4fbe5c2de13
        checksum/config-proxy: 47a124d62070a36b1aeabecd529c63c12e5116e6990af5b92fd6c4bb03864bef
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9101'
    spec:
      
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      initContainers:
        - name: waitfordb
          image: "postgres:9.6-alpine"
          imagePullPolicy: Always
          command: ['sh', '-c', 'until pg_isready -t 5; do echo WaitingDB; done;']
          env:
          - name: PGHOST
            value: "vulnerabilitydb.postgres.host"
          - name: PGPORT
            value: "5432"
      containers:
        
        - name: proxy
          image: "haproxy:2.2-alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 9090
            - name: metrics
              containerPort: 9101
          volumeMounts:
          - mountPath: /usr/local/etc/haproxy
            readOnly: true
            name: config-proxy
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          resources:
            {}
        - name: vulndbapi
          securityContext:
            {}
          image: "adevinta/vulnerability-db-api:tag-vulndb-api"
          imagePullPolicy: Always
          env:
          - name: PG_HOST
            value: "vulnerabilitydb.postgres.host"
          - name: PG_NAME
            value: "vulnerabilitydb"
          - name: PG_USER
            value: "vulnerabilitydb"
          - name: PG_PORT
            value: "5432"
          - name: PG_SSLMODE
            value: "verify-full"
          - name: PG_CA_B64
            value: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVCakNDQXU2Z0F3SUJBZ0lKQU1jMFp6YVNVSzUxTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdQTVFzd0NRWUQKVlFRR0V3SlZVekVRTUE0R0ExVUVCd3dIVTJWaGRIUnNaVEVUTUJFR0ExVUVDQXdLVjJGemFHbHVaM1J2YmpFaQpNQ0FHQTFVRUNnd1pRVzFoZW05dUlGZGxZaUJUWlhKMmFXTmxjeXdnU1c1akxqRVRNQkVHQTFVRUN3d0tRVzFoCmVtOXVJRkpFVXpFZ01CNEdBMVVFQXd3WFFXMWhlbTl1SUZKRVV5QlNiMjkwSURJd01Ua2dRMEV3SGhjTk1Ua3cKT0RJeU1UY3dPRFV3V2hjTk1qUXdPREl5TVRjd09EVXdXakNCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVgpCQWNNQjFObFlYUjBiR1V4RXpBUkJnTlZCQWdNQ2xkaGMyaHBibWQwYjI0eElqQWdCZ05WQkFvTUdVRnRZWHB2CmJpQlhaV0lnVTJWeWRtbGpaWE1zSUVsdVl5NHhFekFSQmdOVkJBc01Da0Z0WVhwdmJpQlNSRk14SURBZUJnTlYKQkFNTUYwRnRZWHB2YmlCU1JGTWdVbTl2ZENBeU1ERTVJRU5CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBclhuRi9FNi9RaCtrdTNoUVRTS1BNaFFRbENwb1d2bkl0aHpYNk1LM3A1YTBlWEtaCm9XSWpZY05ORzZVd0pqcDRmVVhsNmdscDUzSm9ibit0V05YODhkTkgybjhEVmJwcFN3U2NWRTJMcHVMKzk0dlkKMEVZRS9YeE43c3ZLZWE4WXZscnFrVUJLeXhMeFRqaCtVL0tyR09hSHh6OXYwbDZaTmxEYnVhWnczcUlXZEQvSQo2YU5iR2VSVVZ0cE02UCtiV0lveFZsL2NhUXlsUVM2Q0VZVWsrQ3BWeUpTa29wd0pselhUMDd0TW9ETDVXZ1g5Ck8wOEtWZ0ROejlxUC9JR3RBY1JkdVJjTmlvSDNFOXY5ODFRTzF6dC9HcGIyZjhOcUFqVVVDVVp6T25pajZteDkKTWNaKzljV1g4OENSelIwdlFPRFd1WnNjZ0kwOE52TTY5Rm4yU1FJREFRQUJvMk13WVRBT0JnTlZIUThCQWY4RQpCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWMxOWcyTHpMQTVqMEt4YzBMalphCnBtRC92Qjh3SHdZRFZSMGpCQmd3Rm9BVWMxOWcyTHpMQTVqMEt4YzBMalphcG1EL3ZCOHdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUhBRzdXVG15anpQUklNODVyVmorZldIc0xJdnFwdzZET2JJak1Xb2twbGlDZU1JTlpGVgp5bmZnQktzZjFFeHdidkpOellGWFc2ZGlobmd1REc5Vk1QcGkydXAvY3RRVE44dG05bkRLT3kwOHVOWm9vZk1jCk5VWnhLQ0VrVktaditJTDRvSG9lYXl0OGVndHYzdWpKTTZWMTRBc3RNUTZTd3Z3dkE5M0VQL1VnMmU0V0FYSHUKY2JJMU5BYlVnVkRxcCtEUmRmdlprZ1lLcnlqVFdkLzArMWZTOFgxYkJaVld6bDdlaXJOVm5IYlNIMlpEcE51WQowU0JkOGRqNUY2bGQzdDU4eWRaYnJUSHplN0pKT2Q4aWp5U0FwNC9raXU5VWZaV3VUUEFCekRhL0RTZHo5RGsvCnpQVzRDWFh2aExtRTAyVEE5L0hlQ3czS0VISXdpY051RWZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
          - name: LOG_LEVEL
            value: "info"
          
          
          envFrom:
          - secretRef:
              name: vulcan-vulndbapi
          ports:
            - name: app
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 30;"]
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {}
      volumes:
      - name: config-proxy
        configMap:
          name: vulcan-vulndbapi-proxy
---
# Source: vulcan/templates/sqs-exporter.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vulcan-sqsexporter
  labels:
    helm.sh/chart: vulcan-0.2.0
    app.kubernetes.io/name: vulcan
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: vulcan-sqsexporter
      app.kubernetes.io/instance: vulcan
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vulcan-sqsexporter
        app.kubernetes.io/instance: vulcan
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9384'
        iam.amazonaws.com/role: arn:aws:iam::000000000000:role/SQSExporterRole
    spec:
      imagePullSecrets:
        - name: pullsecretname
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: sqs-exporter
          securityContext:
            {}
          image: "jesusfcr/sqs-exporter:custom-endpoint"
          imagePullPolicy: 
          ports:
            - name: metrics
              containerPort: 9384
              protocol: TCP
          env:
          - name: SQS_QUEUE_NAME_PREFIX
            value: VulcanK8S
          resources:
            {}
---
# Source: vulcan/charts/api/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: vulcan
  name: vulcan-api
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: vulcan-api
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
# Source: vulcan/charts/persistence/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: persistence
    app.kubernetes.io/instance: vulcan
  name: vulcan-persistence
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: vulcan-persistence
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
# Source: vulcan/charts/results/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: results
    app.kubernetes.io/instance: vulcan
  name: vulcan-results
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: vulcan-results
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
# Source: vulcan/charts/scanengine/templates/hpa.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app.kubernetes.io/name: scanengine
    app.kubernetes.io/instance: vulcan
  name: vulcan-scanengine
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: vulcan-scanengine
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
# Source: vulcan/charts/api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-api
  labels:
    app.kubernetes.io/name: api
    helm.sh/chart: api-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/cors-allow-origin: https://www.vulcan.com
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
spec:
  tls:
    - hosts:
        - "www.vulcan.com"
        - "vulcan-api.team.cluster.com"
      secretName: vulcan-api-tls
  rules:
    - host: "www.vulcan.com"
      http:
        paths:
          - path: /api
            backend:
              serviceName: vulcan-api
              servicePort: 80
    - host: "vulcan-api.team.cluster.com"
      http:
        paths:
          - path: /api
            backend:
              serviceName: vulcan-api
              servicePort: 80
---
# Source: vulcan/charts/insights/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-insights
  labels:
    helm.sh/chart: insights-0.2.0
    app.kubernetes.io/name: insights
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: SAMEORIGIN";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Xss-Protection: 1";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
      more_set_headers "Content-Security-Policy: default-src 'none'; script-src 'self' 'unsafe-inline' https://insights.vulcan.com https://www.google-analytics.com; font-src 'self' https://insights.vulcan.com; connect-src 'self' https://insights.vulcan.com; img-src 'self' https://insights.vulcan.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://insights.vulcan.com; object-src 'none'";
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
    - hosts:
        - "insights.vulcan.com"
        - "vulcan-insights.team.cluster.com"
      secretName: vulcan-insights-tls
  rules:
    - host: "insights.vulcan.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-insights
              servicePort: 80
    - host: "vulcan-insights.team.cluster.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-insights
              servicePort: 80
---
# Source: vulcan/charts/persistence/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-persistence
  labels:
    app.kubernetes.io/name: persistence
    helm.sh/chart: persistence-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
spec:
  tls:
    - hosts:
        - "persistence.vulcan.com"
        - "vulcan-persistence.team.cluster.com"
      secretName: vulcan-persistence-tls
  rules:
    - host: "persistence.vulcan.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-persistence
              servicePort: 80
    - host: "vulcan-persistence.team.cluster.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-persistence
              servicePort: 80
---
# Source: vulcan/charts/results/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-results
  labels:
    app.kubernetes.io/name: results
    helm.sh/chart: results-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
spec:
  tls:
    - hosts:
        - "results.vulcan.com"
        - "vulcan-results.team.cluster.com"
      secretName: vulcan-results-tls
  rules:
    - host: "results.vulcan.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-results
              servicePort: 80
    - host: "vulcan-results.team.cluster.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-results
              servicePort: 80
---
# Source: vulcan/charts/stream/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-stream
  labels:
    app.kubernetes.io/name: stream
    helm.sh/chart: stream-0.2.0
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
spec:
  tls:
    - hosts:
        - "stream.vulcan.com"
        - "vulcan-stream.team.cluster.com"
      secretName: vulcan-stream-tls
  rules:
    - host: "stream.vulcan.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-stream
              servicePort: 80
    - host: "vulcan-stream.team.cluster.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-stream
              servicePort: 80
---
# Source: vulcan/charts/ui/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vulcan-ui
  labels:
    helm.sh/chart: ui-0.2.0
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: vulcan
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt
spec:
  tls:
    - hosts:
        - "www.vulcan.com"
        - "vulcan-ui.team.cluster.com"
      secretName: vulcan-ui-tls
  rules:
    - host: "www.vulcan.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-ui
              servicePort: 80
    - host: "vulcan-ui.team.cluster.com"
      http:
        paths:
          - path: /
            backend:
              serviceName: vulcan-ui
              servicePort: 80
