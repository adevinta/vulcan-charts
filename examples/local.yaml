minio:
  enabled: true
  ingress:
    enabled: true
    hostname: minio.vulcan.local

localstack:
  enabled: true
  extraStartupScriptContent: |
    awslocal sqs create-queue --queue-name V2ChecksTenable
    awslocal sqs create-queue --queue-name V2ChecksBurp
  ingress:
    enabled: true
    hosts:
      - host: localstack.vulcan.local
        paths:
          - path: /
            pathType: ImplementationSpecific

postgresql:
  enabled: true

redis:
  enabled: true

results:
  conf:
    linkBase: https://results.vulcan.local
  ingress:
    enabled: true
    hosts:
      - host: results.vulcan.local
        paths: [/]

stream:
  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: arn:aws:iam::1234567890:role/eks-workshop-carts-dynamo
    automountServiceAccountToken: true
  automountServiceAccountToken: false
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    enabled: true
    hosts:
      - host: stream.vulcan.local
        paths: [/]

persistence:
  db:
    existingSecret: vulcan-postgresql
    existingSecretPasswordKey: postgres-password
  ingress:
    enabled: true
    hosts:
      - host: persistence.vulcan.local
        paths: [/]

api:
  conf:
    saml:
      callback: https://www.vulcan.local/api/v1/login/callback
      trustedDomains: '["www.vulcan.local"]'
    globalPolicies:
      - name: web-scanning-global
        allowedAssettypes:
        blockedAssettypes:
        allowedChecks:
          - vulcan-zap
        blockedChecks:
        excludingSuffixes:
          - experimental
    vulcantrackerTeams: "team1,team2"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://www.vulcan.local"
      nginx.ingress.kubernetes.io/proxy-body-size: 8m
    hosts:
      - host: www.vulcan.local
        paths: [/api]

crontinuous:
  conf:
    teamsWhitelistScan: '["team1", "team2"]'
    teamsWhitelistReport: '["team3"]'
  ingress:
    enabled: false

scanengine:
  ingress:
    enabled: false
  db:
    existingSecret: vulcan-postgresql
    existingSecretPasswordKey: postgres-password
  conf:
    queues:
      other:
      - arn: arn:aws:sqs:{{.Values.global.region}}:{{.Values.global.accountId}}:V2ChecksTenable
        checktypes: '["vulcan-nessus"]'
      - arn: arn:aws:sqs:{{.Values.global.region}}:{{.Values.global.accountId}}:V2ChecksBurp
        checktypes: '["vulcan-burp"]'

ui:
  conf:
    apiUrl: https://www.vulcan.local/api/v1/
  ingress:
    enabled: true
    hosts:
      - host: www.vulcan.local
        paths: [/]

reportsgenerator:
  db:
    existingSecret: vulcan-postgresql
    existingSecretPasswordKey: postgres-password
  ingress:
    enabled: false

vulndbapi:
  ingress:
    enabled: true
    hosts:
      - host: vulndbapi.vulcan.local
        paths: [/]
  conf:
    readReplicaHost:
  db:
    existingSecret: vulcan-postgresql
    existingSecretPasswordKey: postgres-password

tracker:
  ingress:
    enabled: true
    hosts:
      - host: tracker.vulcan.local
        paths: [/]
  conf:
    logLevel: "error"
    awsServerCredentialKey: "/path/to/credentials/"
  db:
    existingSecret: vulcan-postgresql
    existingSecretPasswordKey: postgres-password
