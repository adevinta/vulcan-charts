global:
  domain: example.vulcan.com
  region: eu-west-1
  podLabels:
    global-namespace: "{{ .Release.Namespace }}"
    global-label: foo

defaults:
  db: &db
    ca: |
      -----BEGIN CERTIFICATE-----
      MIIEBjCCAu6gAwIBAgIJAMc0ZzaSUK51MA0GCSqGSIb3DQEBCwUAMIGPMQswCQYD
      VQQGEwJVUzEQMA4GA1UEBwwHU2VhdHRsZTETMBEGA1UECAwKV2FzaGluZ3RvbjEi
      MCAGA1UECgwZQW1hem9uIFdlYiBTZXJ2aWNlcywgSW5jLjETMBEGA1UECwwKQW1h
      em9uIFJEUzEgMB4GA1UEAwwXQW1hem9uIFJEUyBSb290IDIwMTkgQ0EwHhcNMTkw
      ODIyMTcwODUwWhcNMjQwODIyMTcwODUwWjCBjzELMAkGA1UEBhMCVVMxEDAOBgNV
      BAcMB1NlYXR0bGUxEzARBgNVBAgMCldhc2hpbmd0b24xIjAgBgNVBAoMGUFtYXpv
      biBXZWIgU2VydmljZXMsIEluYy4xEzARBgNVBAsMCkFtYXpvbiBSRFMxIDAeBgNV
      BAMMF0FtYXpvbiBSRFMgUm9vdCAyMDE5IENBMIIBIjANBgkqhkiG9w0BAQEFAAOC
      AQ8AMIIBCgKCAQEArXnF/E6/Qh+ku3hQTSKPMhQQlCpoWvnIthzX6MK3p5a0eXKZ
      oWIjYcNNG6UwJjp4fUXl6glp53Jobn+tWNX88dNH2n8DVbppSwScVE2LpuL+94vY
      0EYE/XxN7svKea8YvlrqkUBKyxLxTjh+U/KrGOaHxz9v0l6ZNlDbuaZw3qIWdD/I
      6aNbGeRUVtpM6P+bWIoxVl/caQylQS6CEYUk+CpVyJSkopwJlzXT07tMoDL5WgX9
      O08KVgDNz9qP/IGtAcRduRcNioH3E9v981QO1zt/Gpb2f8NqAjUUCUZzOnij6mx9
      McZ+9cWX88CRzR0vQODWuZscgI08NvM69Fn2SQIDAQABo2MwYTAOBgNVHQ8BAf8E
      BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUc19g2LzLA5j0Kxc0LjZa
      pmD/vB8wHwYDVR0jBBgwFoAUc19g2LzLA5j0Kxc0LjZapmD/vB8wDQYJKoZIhvcN
      AQELBQADggEBAHAG7WTmyjzPRIM85rVj+fWHsLIvqpw6DObIjMWokpliCeMINZFV
      ynfgBKsf1ExwbvJNzYFXW6dihnguDG9VMPpi2up/ctQTN8tm9nDKOy08uNZoofMc
      NUZxKCEkVKZv+IL4oHoeayt8egtv3ujJM6V14AstMQ6SwvwvA93EP/Ug2e4WAXHu
      cbI1NAbUgVDqp+DRdfvZkgYKryjTWd/0+1fS8X1bBZVWzl7eirNVnHbSH2ZDpNuY
      0SBd8dj5F6ld3t58ydZbrTHze7JJOd8ijySAp4/kiu9UfZWuTPABzDa/DSdz9Dk/
      zPW4CXXvhLmE02TA9/HeCw3KEHIwicNuEfw=
      -----END CERTIFICATE-----
    port: 5432
    sslMode: verify-full

api:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/APIRole
  extraPodLabels:
    extra-label-tag: api-{{ .Values.comp.image.tag }}
  autoscaling:
    enabled: true
  conf:
    awscatalogue:
      key: awscatalogekey
      kind: CloudGovernance
      retries: 4
      retry_interval: 2
      url: https://catalogue-api.host
    bucketLogs: s3-vulcan-logs
    bucketReports: s3-vulcan-reports
    defaultOwners: '["aaaaaaaa-xxxx-yyyy-zzzz-bbbbbbbbbbbb"]'
    queueArn: arn:aws:sqs:eu-west-1:000000000000:APIScans
    reports:
      snsArn: arn:aws:sns:eu-west-1:000000000000:ReportsGen
      vulcanUIUrl: https://www.vulcan.example.com
    saml:
      callback: https://www.vulcan.example.com/api/v1/login/callback
      issuer: http://www.issuer.com/appcode
      metadata: https://org.issuer.com/app/appcode/sso/saml/metadata
      trustedDomains: '["vulcan.example.com"]'
    secretKey: apisecretkey
    globalPolicies:
      - name: web-scanning-global
        allowedAssettypes:
        blockedAssettypes:
        allowedChecks:
          - vulcan-zap
        blockedChecks:
        excludingSuffixes:
          - experimental
    kafka:
      broker: kafka-broker
      username: kafka-user
      password: kafka-pwd
      topics: '{assets = "assets"}'
  db:
    <<: *db
    host: api.postgres.host
    name: vulcanapi
    password: passworddbapi
    user: vulcan
  image:
    tag: tag-api
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/cors-allow-origin: https://www.vulcan.example.com
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: 8m
    enabled: true
    hosts:
    - host: www.vulcan.example.com
      paths:
      - /api
    tls:
    - hosts:
      - www.vulcan.example.com
      secretName: vulcan-api-tls
  proxy:
    timeoutServer: 50s
crontinuous:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/CrontinuousRole
  extraPodLabels:
    extra-label: crontinuous
  conf:
    crontinuousBucket: s3-vulcan-crontinuous
    enableTeamsWhitelistReport: "false"
    enableTeamsWhitelistScan: "false"
    teamsWhitelistReport: '[]'
    teamsWhitelistScan: '[]'
    vulcanToken: supersecretvulcantoken
    vulcanUser: vulcanuser
  image:
    tag: tag-crontinuous
  imagePullSecrets:
  - name: pullsecretname
extraManifests:
  config: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        {{- include "vulcan.labels" . | nindent 4 }}
      name: vulcan-custom-configmap
    data:
      custom.cfg: |
        Example file
dogstatsd:
  apiKey: xxxxxxxxxxxxxxxxxxxxx
insights:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/InsightsRole
  autoscaling:
    enabled: true
  conf:
    private:
      s3Bucket: s3-vulcan-insights
    public:
      s3Bucket: s3-vulcan-public-insights
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "X-Frame-Options: SAMEORIGIN";
        more_set_headers "X-Content-Type-Options: nosniff";
        more_set_headers "X-Frame-Options: DENY";
        more_set_headers "X-Xss-Protection: 1";
        more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
        more_set_headers "Content-Security-Policy: default-src 'none'; script-src 'self' 'unsafe-inline' https://insights.vulcan.example.com https://www.google-analytics.com; font-src 'self' https://insights.vulcan.example.com; connect-src 'self' https://insights.vulcan.example.com; img-src 'self' https://insights.vulcan.example.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://insights.vulcan.example.com; object-src 'none'";
      nginx.ingress.kubernetes.io/cors-allow-origin: '*'
      nginx.ingress.kubernetes.io/enable-cors: "true"
    enabled: true
    hosts:
    - host: insights.vulcan.example.com
      paths:
      - /
    tls:
    - hosts:
      - insights.vulcan.example.com
      secretName: vulcan-insights-tls
metrics:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/MetricsRole
  conf:
    checksQueueArn: arn:aws:sqs:eu-west-1:000000000000:MetricsChecks
    devHoseFindingsSource: vulcan-findings
    devHoseMetricsSource: usage
    devHoseTenant: purple
    devHoseToken: secretdevhosetoken
    devHoseURL: http://devhosehost.com/devhose
    findingsQueueArn: arn:aws:sqs:eu-west-1:000000000000:MetricsFindings
    scansQueueArn: arn:aws:sqs:eu-west-1:000000000000:MetricsScans
    vulcanAPIExternal: https://api.vulcan.example.com/api
    vulcanAPIToken: supersecretvulcantoken
  image:
    tag: tag-metrics
  imagePullSecrets:
  - name: pullsecretname
persistence:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/PersistenceRole
  autoscaling:
    enabled: true
  conf:
    logLevel: info
    railsMaxThreads: 16
    secretKeyBase: secretkey
  db:
    <<: *db
    host: persistence.postgres.host
    name: vulcanpersistence
    password: passwordpersistence
    user: vulcan
  image:
    tag: tag-persistence
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/proxy-body-size: 8m
    enabled: true
    hosts:
    - host: persistence.vulcan.example.com
      paths:
      - /
    tls:
    - hosts:
      - persistence.vulcan.example.com
      secretName: vulcan-persistence-tls
reportsgenerator:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ReportsGeneratorRole
  conf:
    generators:
      livereport:
        emailSubject: Vulcan Digest
      scan:
        contact:
          companyName: Example
          email: vulcan@example.com
          jira: https://jira.com/
          slackChannel: https://www.slack.com/archives/XXXXX
          supportEmail: vulcan@example.com
        docs:
          apiDocLink: https://www.domain.com/org/vulcan-api/examples/#how-do-i-list-the-members-of-a-team
          roadmapLink: https://docs.google.com/spreadsheets/d/xxxxxxxxxxxxxxx/edit?usp=sharing
        emailSubject: Security Overview
        gaId: UA-109338366-3
        privateBucket: s3-vulcan-insights
        proxyEndpoint: https://insights.vulcan.example.com
        publicBucket: s3-vulcan-public-insights
        vulcanUi: https://www.vulcan.example.com/
    queueArn: arn:aws:sqs:eu-west-1:000000000000:ReportsGenerator
    ses:
      cc: '[''vulcan@example.com'']'
      from: vulcan@example.com
  db:
    <<: *db
    host: reportsgenerator.postgres.host
    name: reportsgenerator
    password: passwordreportgenerator
    user: vulcan
  dogstatsd:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  image:
    tag: tag-reports
  imagePullSecrets:
  - name: pullsecretname
  proxy:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  resources:
    limits:
      cpu: 250m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 2Gi
results:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ResultsRole
  autoscaling:
    enabled: true
  conf:
    bucketLogs: s3-vulcan-logs
    bucketReports: s3-vulcan-reports
    linkBase: https://results.vulcan.example.com
  image:
    tag: tag-results
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/proxy-body-size: 8m
    enabled: true
    hosts:
    - host: results.vulcan.example.com
      paths:
      - /
    tls:
    - hosts:
      - results.vulcan.example.com
      secretName: vulcan-results-tls
scanengine:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/ScanEngineRole
  autoscaling:
    enabled: true
  conf:
    checkCreator:
      numOfWorkers: 3
      period: 30
    checksSNS:
      topicArn: arn:aws:sns:eu-west-1:000000000000:Checks
    queueArn: arn:aws:sqs:eu-west-1:000000000000:ScanEngineCheckStatus
    queues:
      default:
        arn: arn:aws:sqs:eu-west-1:000000000000:V2ChecksGeneric
      other:
      - arn: arn:aws:sqs:eu-west-1:000000000000:V2ChecksTenable
        checktypes: '["vulcan-nessus"]'
      - arn: arn:aws:sqs:eu-west-1:000000000000:V2ChecksBurp
        checktypes: '["vulcan-burp"]'
    scansSNS:
      topicArn: arn:aws:sns:eu-west-1:000000000000:Scans
    snsArn: arn:aws:sns:eu-west-1:000000000000:Scans
  db:
    <<: *db
    host: scanengine.postgres.host
    name: vulcanscanengine
    password: passwordscanengine
    user: vulcan
  image:
    tag: tag-scanengine
  imagePullSecrets:
  - name: pullsecretname
sqsexporter:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/SQSExporterRole
  imagePullSecrets:
  - name: pullsecretname
stream:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/StreamRole
  conf:
    ttl: 0
  redis:
    host: myelasticcache
    port: 6379
    password: myelasticpwd
  image:
    tag: tag-stream
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
      nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    enabled: true
    hosts:
    - host: stream.vulcan.example.com
      paths:
      - /
    tls:
    - hosts:
      - stream.vulcan.example.com
      secretName: vulcan-stream-tls
ui:
  conf:
    apiUrl: https://www.vulcan.example.com/api/v1/
    contact:
      email: vulcan@example.com
      slack: https://org.slack.com/archives/XXXXXXXXXXXX
    docs:
      apiLink: https://docs.example.com/security/vulcan-api/
      auditRoleLink: https://confluence.example.com/x/code
      discoveryLink: https://docs.example.com/security/vulcan-docs/60-asset-auto-discovery/
      whitelistingLink: https://docs.example.com/security/vulcan-docs/network-access/
    dashboard:
      link:
  image:
    tag: tag-vulcan-ui
  imagePullSecrets:
  - name: pullsecretname
  ingress:
    annotations:
      certmanager.k8s.io/cluster-issuer: letsencrypt
    enabled: true
    hosts:
    - host: www.vulcan.example.com
      paths:
      - /
    tls:
    - hosts:
      - www.vulcan.example.com
      secretName: vulcan-ui-tls
vulndb:
  annotations:
    iam.amazonaws.com/role: arn:aws:iam::000000000000:role/VulnDBRole
  conf:
    checksQueueArn: arn:aws:sqs:eu-west-1:000000000000:VulnDBChecks
    logLevel: info
    resultsUrl: https://results.vulcan.example.com
    vulnsTopicArn: arn:aws:sns:eu-west-1:000000000000:VulnDBVulns
  db:
    <<: *db
    host: vulnerabilitydb.postgres.host
    name: vulnerabilitydb
    password: xxxxxxxxxx
    user: vulnerabilitydb
  image:
    tag: tag-vulndb
  imagePullSecrets:
  - name: pullsecretname
vulndbapi:
  conf:
    logLevel: info
  db:
    <<: *db
    host: vulnerabilitydb.postgres.host
    name: vulnerabilitydb
    password: xxxxxxxxxx
    user: vulnerabilitydb
  image:
    tag: tag-vulndb-api
  imagePullSecrets:
  - name: pullsecretname
  proxy:
    cache:
      enabled: true
      maxAge: 600
